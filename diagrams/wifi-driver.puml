@startuml Wifi Driver

class Wifi_driver{
    -controller: AsyncWifi<EspWifi>
    +connect(&str, Option<String>)
    +is_started()
    +is_connected()
    +get_address_info()
    +get_dns_info()
    +get_http_client()
    +get_https_client()
}

interface Http{
    +post(string, Vec<HttpHeader>)
    +get(string, Vec<HttpHeader>)
    +put(string, Vec<HttpHeader>)
    +delete(string, Vec<HttpHeader>)
    +patch(string,Vec<HttpHeader> )
    +head(string, Vec<HttpHeader>)
    +options(string, Vec<HttpHeader>)
    +response_status()
    +response_status_message()
    +wait_for_response([u8])
}

class HttpClient{
    -connection: EspHttpConnection
    +get_connection()
    
}

class HttpsClient{
    -connection: EspHttpConnection
    +get_connection()
}

class HttpHeader {
    value: string
    +to_string()
}

enum HttpHeaderType {
    AIM,
    Accept,
    AcceptCharset,
    AcceptDatetime,
    AcceptEncoding,
    AcceptLanguage,
    AccessControlRequestMethod,
    Authorization,
    CacheControl,
    Connection,
    ContentEncoding,
    ContentLength,
    ContentMD5,
    ContentType,
    Cookie,
    Custom( &'a str ),
    Date,
    Expect,
    Forwarded,
    From,
    Host,
    HTTP2Settings,
    IfMatch,
    IfModifiedSince,
    IfNoneMatch,
    IfRange,
    IfUnmodifiedSince,
    MaxForwards,
    Origin,
    Pragma,	
    Prefer,	
    ProxyAuthorization,
    Range,	
    Referer,
    TE,
    Trailer,
    TransferEncoding,
    UserAgent,
    Upgrade,
    Via,
    Warning,
}

Wifi_driver ..> HttpClient: create
Wifi_driver ..> HttpsClient: create
HttpClient --> Http
HttpsClient --> Http
Http -> HttpHeader
HttpHeader *- HttpHeaderType

@enduml