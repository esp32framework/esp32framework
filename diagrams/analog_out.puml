@startuml analog_out
class AnalogOut {
    + duty()
    + set_high_level_output_ratio(f32)
    + set_high()
    + set_low()
    + start_changing_by_fixed_amount(u64, f32, f32)
    + start_increasing(u64, f32, f32)
    + start_decreasing(u64, f32, f32)
    + start_increasing_bounce_back(u64, f32, f32, Option<u32>)
    + start_decreasing_bounce_back(u64, f32, f32, Option<u32>)
    + start_increasing_reset(u64, f32, f32, Option<u32>)
    + start_decreasing_intensity_reset(u64, f32, f32, Option<u32>)
    + update_interrupt()
}

class _AnalogOut{
    -driver: LedcDriver,
    -timer_driver: TimerDriver,
    -duty: Arc<AtomicU32>,
    -fixed_change_increasing: Arc<AtomicBool>,
    -amount_of_cycles: Option<u32>,
    + duty()
    + set_high_level_output_ratio(f32)
    + set_high()
    + set_low()
    + start_changing_by_fixed_amount(u64, f32, f32)
    + start_increasing(u64, f32, f32)
    + start_decreasing(u64, f32, f32)
    + start_increasing_bounce_back(u64, f32, f32, Option<u32>)
    + start_decreasing_bounce_back(u64, f32, f32, Option<u32>)
    + start_increasing_reset(u64, f32, f32, Option<u32>)
    + start_decreasing_intensity_reset(u64, f32, f32, Option<u32>)
    + update_interrupt()
}

class ChangeDutyUpdate{
    -change: Arc<AtomicBool>
    +change_duty()
    +handle_change_duty()
}

enum FixedChangeType {
    None,
    Decrease(ExtremeDutyPolicy),
    Increase(ExtremeDutyPolicy),
}

enum ExtremeDutyPolicy{
    BounceBack,
    None,
    Reset,
}

AnalogOut *-- _AnalogOut
_AnalogOut *-- ChangeDutyUpdate
_AnalogOut -> FixedChangeType
FixedChangeType --> ExtremeDutyPolicy

@enduml