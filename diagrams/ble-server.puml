@startuml Ble Server


class BleServer{
    + connection_handler(handler)
    + disconnect_handler(handler)
    + set_connection_settings(ConnectionInformation, u16,u16,u16,u16)
    + set_advertising_interval(u16,u16)
    + set_high_advertising_duty_cycle()
    + set_low_advertising_duty_cycle()
    + set_discoverable_mode(DiscoverableMode)
    + set_connection_mode(ConnectionMode)
    + set_service(&Service)
    + set_services(&Vec<Service>)
    + set_characteristic(BleId, &Characteristic)
    + notify_value(BleId, &Characteristic)
    + list_clients()
    + disconnect_client(&ConnectionInformation)
    + disconnect_all_clients()
    + get_characteristic_data(&BleId, &BleId)
    + get_all_service_characteristics_data(&BleId)
    + start()
}

class _BleServer{
    - advertising_name: String,
    - ble_server: &mut BLEServer,
    - advertisement: &Mutex<BLEAdvertising>
    + connection_handler(handler)
    + disconnect_handler(handler)
    + set_connection_settings(ConnectionInformation, u16,u16,u16,u16)
    + set_advertising_interval(u16,u16)
    + set_high_advertising_duty_cycle()
    + set_low_advertising_duty_cycle()
    + set_discoverable_mode(DiscoverableMode)
    + set_connection_mode(ConnectionMode)
    + set_service(&Service)
    + set_services(&Vec<Service>)
    + set_characteristic(BleId, &Characteristic)
    + notify_value(BleId, &Characteristic)
    + list_clients()
    + disconnect_client(&ConnectionInformation)
    + disconnect_all_clients()
    + get_characteristic_data(&BleId, &BleId)
    + get_all_service_characteristics_data(&BleId)
    + start()
}

class ConnectionCallback{
    -callback
    -info_queue
    -notifier
    +set_callback()
    +handle_connection_changes()
}

class Service {
    - data: Vec<u8>
    + add_characteristic()
    
} 

class Characteristic{
    - properties: u16
    - data: Vec<u8>
    + add_descriptor(&Descriptor)
    + update_data(bool)
    + writable(bool)
    + readable(bool)
    + notifiable(bool)
    + readable_enc(bool)
    + readable_authen(bool)
    + readable_author(bool)
    + writable_no_rsp(bool)
    + writable_enc(bool)
    + writable_authen(bool)
    + writable_author(bool)
    + broadcastable(bool)
    + indicatable(bool)
    + is_readable()
    + is_writable()
    + is_indicatable()
    + is_notifiable()
    + is_broadcastable()
}

class Descriptor{
    - properties: u8
    - data: Vec<u8>
    + get_properties()
    + writable(bool)
    + readable(bool)
    + notifiable(bool)
    + readable_enc(bool)
    + readable_authen(bool)
    + readable_author(bool)
    + writable_no_rsp(bool)
    + writable_enc(bool)
    + writable_authen(bool)
    + writable_author(bool)
}

enum DiscoverableMode {
    GeneralDiscoverable(u16, u16),
    NonDiscoverable()
}

enum ConnectionMode {
    NonConnectable,
    UndirectedConnectable,
}

enum BleId {
    FromUuid16(u16),
    FromUuid128([u8; 16]),
    --
    + ByName(String),
    + StandardService(StandarServiceId),
    + StandarCharacteristic(StandarCharacteristicId),
    + StandarDescriptor(StandarDescriptorId),
    + byte_size()
}

BleServer *-right- _BleServer
_BleServer *- Service
_BleServer *-- "2" ConnectionCallback
Service *-- Characteristic
Characteristic  *-- Descriptor
_BleServer --> DiscoverableMode
_BleServer --> ConnectionMode
_BleServer -> BleId
Service *- BleId
Characteristic *- BleId
Descriptor *- BleId


@enduml