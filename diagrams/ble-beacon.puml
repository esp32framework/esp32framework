@startuml Ble Beacon

class BleBeacon{
    - advertising_name: String,
    - ble_device: &'a mut BLEDevice,
    - services: SharableRef<HashMap<BleId, Service>>,
    - advertisement: SharableRef<BLEAdvertisementData>,
    - timer_driver: TimerDriver<'a>,
    - time_per_service: Duration,
    + set_name(String)
    + set_service(&Service)
    + set_services(Vec<Service>)
    + remove_service(&BleId)
    + remove_services(Vec<BleId>)
    + advertise_service_data(&BleId)
    + set_time_per_service(Duration)
    + advertise_all_service_data()
    + start()
    + stop()
}

enum BleId {
    FromUuid16(u16),
    FromUuid128([u8; 16]),
    --
    + ByName(String),
    + StandardService(StandarServiceId),
    + StandarCharacteristic(StandarCharacteristicId),
    + StandarDescriptor(StandarDescriptorId),
    + byte_size()
}

class Service {
    - data: Vec<u8>
    + add_characteristic()
    
} 

class Characteristic{
    - properties: u16
    - data: Vec<u8>
    + add_descriptor(&Descriptor)
    + update_data(bool)
    + writable(bool)
    + readable(bool)
    + notifiable(bool)
    + readable_enc(bool)
    + readable_authen(bool)
    + readable_author(bool)
    + writable_no_rsp(bool)
    + writable_enc(bool)
    + writable_authen(bool)
    + writable_author(bool)
    + broadcastable(bool)
    + indicatable(bool)
    + is_readable()
    + is_writable()
    + is_indicatable()
    + is_notifiable()
    + is_broadcastable()
}

class Descriptor{
    - properties: u8
    - data: Vec<u8>
    + get_properties()
    + writable(bool)
    + readable(bool)
    + notifiable(bool)
    + readable_enc(bool)
    + readable_authen(bool)
    + readable_author(bool)
    + writable_no_rsp(bool)
    + writable_enc(bool)
    + writable_authen(bool)
    + writable_author(bool)
}

BleBeacon -> BleId
BleBeacon o- Service
Service *- Characteristic
Service *-- BleId
Characteristic *- Descriptor
Characteristic *-- BleId
Descriptor *- BleId
@enduml