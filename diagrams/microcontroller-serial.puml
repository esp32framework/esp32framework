@startuml Microcontroller serial

class Microcontroller {
    + peripherals: Peripherals
    + timer_drivers: Vec<TimerDriver>
    + interrupt_drivers: Vec<InterruptDriver>
    + adc_driver: SharableAdcDriver
    + notification: Notification
    + event_loop: EspSystemEventLoop
    + get_timer_driver() : TimerDriver
    + set_pin_as_digital_in(usize) : DigitalIn
    + set_pin_as_digital_out(usize) : DigitalOut
    + start_adc_driver()
    + set_pin_as_analog_in_low_atten(usize): AnalogIn
    + set_pin_as_analog_in_medium_atten(usize): AnalogIn
    + set_pin_as_analog_in_high_atten(usize): AnalogIn
    + set_pin_as_analog_in_no_atten(usize): AnalogIn
    + set_pin_as_analog_out(usize, u32, u32): AnalogOut
    + set_pin_as_default_analog_out(usize): AnalogOut
    + set_pin_as_analog_in_pwm(usize, u32): AnalogInPwm
    + set_pin_as_default_analog_in_pwm(usize): AnalogInPwm
    + set_pins_for_i2c_master(usize,usize): I2CMaster
    + set_pins_for_i2c_slave(usize,usize,u8): I2CSlave
    + set_pins_for_default_uart(usize,usize,usize): UART
    + set_pins_for_uart(usize,usize,usize,u32,Parity,Stopbit): UART
    - take_ble_device(): BLEDevice
    + ble_beacon(String, &Vec<Service>): BleBeacon
    + ble_server(String, &Vec<Service>): BleServer
    - config_bluetooth_security(&mut BLEDevice, Security): 
    + ble_secure_server(String, &Vec<Service>, Security): BleServer
    + ble_client(): BleClient
    - wait_for_updates_indefinitly()
    - wait_for_updates_until()
    + wait_for_updates()
    + update(DigitalIn,DigitalOut): void
    + sleep(u32): void
    + wait_for_updates_until_finished(SharableRef<bool>)
    + block_on(Future)
    + get_wifi_driver(): WifiDriver
}

class I2CMaster{
    - driver: I2cDriver<'a>
    + read(u8, [u8], u32) : Result<>
    + write(u8, [u8], u32) : Result<>
    + write_read(u8 , [u8], [u8], u32) : Result<>
}

class I2CSlave{
    - driver: I2cSlaveDriver<'a>
    + read([u8], u32): Result<>
    + write([u8], u32): Result<>
}

class UART{
    - driver: UartDriver<'a>
    + write([u8]): Result<>
    + read([u8]): Result<>
    +read_with_timeout([u8], u32): Result<>
}

exception I2CError {
    Temp,
    InvalidPin,
    InvalidPeripheral,
    BufferTooSmall,
    InvalidArg,
    DriverError,
    NoMoreHeapMemory,
    TimeoutError,
    ErrorInReadValue
}

exception UARTError{
    InvalidPin,
    InvalidUartNumber,
    DriverError,
    WriteError,
    ReadError,
    InvalidBaudrate
}

Microcontroller *-- I2CMaster
Microcontroller *-- I2CSlave
Microcontroller *-- UART
UART --> UARTError
I2CMaster --> I2CError
I2CSlave --> I2CError


@enduml