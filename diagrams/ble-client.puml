@startuml Ble client

class BleClient {
    + find_device(Option<Duration>, condition)
    + find_device_async(Option<Duration>, condition)
    + find_device_with_service(Option<Duration>, &BleId)
    + find_device_with_service_async(Option<Duration>, &BleId)
    + find_device_of_name(Option<Duration>, String)
    + find_device_of_name_async(Option<Duration>, String)
    + connect_to_device(BleAdvertisedDevice)
    + connect_to_device_async(BleAdvertisedDevice)
    + get_all_service_ids()
    + fn get_all_service_ids_async()
    + get_characteristics(&BleId, &BleId)
    + get_all_characteristic(&BleId)
    + get_characteristics_async(&BleId, &BleId)
    + get_all_characteristic_async(&BleId)
    + disconnect()
}

class _BleClient{
    - ble_client: BLEClient,
    - ble_scan: &mut BLEScan,
    - connected: bool,
    - time_between_scans: u16,
    - notifier: Notifier,
    + find_device(Option<Duration>, condition)
    + find_device_async(Option<Duration>, condition)
    + find_device_with_service(Option<Duration>, &BleId)
    + find_device_with_service_async(Option<Duration>, &BleId)
    + find_device_of_name(Option<Duration>, String)
    + find_device_of_name_async(Option<Duration>, String)
    + connect_to_device(BleAdvertisedDevice)
    + connect_to_device_async(BleAdvertisedDevice)
    + get_all_service_ids()
    + fn get_all_service_ids_async()
    + _get_characteristics_async(&BleId, &BleId)
    + _get_all_characteristic_async(&BleId)
    + disconnect()
}

class BleClientUpdater{
    + add_characteristic(&RemoteCharacteristic)
    
}


class RemoteCharacteristic{
    + on_notify()
    + execute_if_notified()
}

class _RemoteCharacteristic{
    - characteristic: BLERemoteCharacteristic
    + id()
    + is_readable()
    + is_writable()
    + is_notifiable()
    + is_broadcastable()
    + is_writable_no_resp()
    + read_async()
    + read()
    + write_async(&[u8])
    + write(&[u8])
    + set_notification_on_notify()
    + get_descriptor(&BleId)
    + get_descriptor_async(&BleId)
    + get_all_descriptors()
    + get_all_descriptors_async()
}

class Notifier{
    + notify()
}

class RemoteCharacteristicUpdater{
    + notify_callback
    + notify_queue
    + execute_if_notified()
    + get_queue()
}

class RemoteDescriptor{
    + descriptor: BLERemoteDescriptor
    + id()
    + read_async()
    + read()
    + write_async(&[u8])
    + write(&[u8])
}

enum BleId {
    FromUuid16(u16),
    FromUuid128([u8; 16]),
    --
    + ByName(String),
    + StandardService(StandarServiceId),
    + StandarCharacteristic(StandarCharacteristicId),
    + StandarDescriptor(StandarDescriptorId),
    + byte_size()
}

BleClient *-- _BleClient 
BleClient *- BleClientUpdater
BleClientUpdater *- RemoteCharacteristic
BleClientUpdater -> BleId 
RemoteCharacteristic *- RemoteCharacteristicUpdater
RemoteCharacteristic *-- _RemoteCharacteristic
_RemoteCharacteristic -down-> Notifier
_RemoteCharacteristic -down-> RemoteDescriptor
_RemoteCharacteristic --> BleId
_BleClient --> Notifier
_BleClient --> BleId
@enduml