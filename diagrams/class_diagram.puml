@startuml

class Microcontroller {
    + peripherals: Peripherals
    + timer_driver: Vec<TimerDriver>
    + adc_driver: SharableAdcDriver
    + set_pin_as_digital_in(usize) : DigitalIn
    + set_pin_as_digital_out(usize) : DigitalOut
    + set_pin_as_analog_in_low_atten(usize): AnalogIn
    + set_pin_as_analog_in_medium_atten(usize): AnalogIn
    + set_pin_as_analog_in_high_atten(usize): AnalogIn
    + set_pin_as_analog_in_no_atten(usize): AnalogIn
    + set_pin_as_analog_out(usize, u32, u32): AnalogOut
    + set_pin_as_default_analog_out(usize): AnalogOut
    + set_pin_as_analog_in_pwm(usize, u32): AnalogInPwm
    + set_pin_as_default_analog_in_pwm(usize): AnalogInPwm
    + update(DigitalIn,DigitalOut): void
    + sleep(u32): void
}

class Peripherals {
    + pins: Array<Peripheral>
    + timers: Array<Peripheral>
    + pwm_channels: Array<Peripheral>
    + pwm_timers: Array<Peripheral>
    + adc: Peripheral
    + get_digital_pin(usize): Peripheral 
    + get_analog_pin(usize): Peripheral 
    + get_pwm_pin(usize): Peripheral 
    + get_timer(usize): Peripheral
    + get_adc(usize): Peripheral
    + get_next_pwm(usize): Peripheral
}

enum Peripheral {
    Pin(u8)
    Timer(u8)
    PWMChannel(u8)
    PWMTimer(u8)
    Adc
    None
}

enum AnalogChannels {
    Channel0
    Channel1
    Channel2
    Channel3
    Channel4
    Channel5
    Channel6  
}

class DigitalOut {
    + pin_driver: PinDriver
    + timer_driver: TimerDriver
    + interrupt_update_code: Arc<AtomicInterruptUpdateCode>
    + set_level(): Result<>
    + get_level(): Level
    + set_high(): Result<>
    + set_low(): Result<>
    + toggle(): Result<>
    + blink(frequency, duration) : Result<>
    + update_interrupt(): Result<>
}

class DigitalIn {
    + pin_driver: PinDriver
    + timer_driver: TimerDriver
    + interrupt_type: Optional<InterruptType>
    + interrupt_update_code: Arc<AtomicInterruptUpdateCode>
    + user_callback: fn()
    + debounce_ms: Optional<u32>
    + wait_for_flank(): void
    + change_interrupt_type(InterruptType): Result<>
    + trigger_on_interrupt(fn, InterruptType): Result<>
    + trigger_on_interrupt_first_n_times(usize, fn, InterruptType): Result<>
    + update_interrupt(): Result<>
    + get_level(): Level
    + is_high(): bool
    + is_low(): bool
    + set_debounce(u32): Result<>
    + set_pull(Pull): Result<>
}

class TimerDriver {
    + driver: timer::TimerDriver
    + interrupt_after(u32, Fn)
    + enable(): void
    + disable(): void
    + unsubscribe(): void
}

class AnalogInPwm {
    + digital_in: DigitalIn
    + sampling: u32
    + set_sampling(u32): void
    + read(): f32
    + read_percentage: f32
}

class AnalogIn {
    + adc_channel_driver: AnalogChannels
    + adc_driver_ref: SharableAdcDriver
    + read(): Result<>
    + read_raw(): Result<>
    + smooth_read(u16): Result<>
}

class AnalogOut {
    + driver: LedcDriver
    + timer_driver: TimerDriver
    + duty: Arc<AtomicU32>
    + interrupt_update_code: Arc<AtomicInterruptUpdateCode>
    + fixed_change_increasing: Arc<AtomicBool>
    + fixed_change_type: FixedChangeType
    + amount_of_cycles: Optional<u32>
    + set_high_level_output_ratio(f32): Result<>
    + start_increasing(u32, f32, f32): Result<>
    + start_decreasing(u32, f32, f32): Result<>
    + start_increasing_bounce_back(u32, f32, f32, Option): Result<>
    + start_decreasing_bounce_back(u32, f32, f32, Option): Result<>
    + start_increasing_reset(u32, f32, f32, Option): Result<>
    + start_decreasing_intensity_reset(u32, f32, f32, Option): Result<>
    + update_interrupt(): Result<>
}


Microcontroller "1" --> "1" Peripherals
Microcontroller "1" --> "*" TimerDriver
Microcontroller ..> DigitalOut: create
Microcontroller ..> DigitalIn: create
Microcontroller ..> AnalogInPwm: create
Microcontroller ..> AnalogIn: create
Microcontroller ..> AnalogOut: create

Peripherals"1" --> "0..*" Peripheral

DigitalOut "1" --> "1" TimerDriver

DigitalIn "1" --> "1" TimerDriver

AnalogInPwm "1" --> "1" DigitalIn

AnalogIn "1" --> "1" AnalogChannels

AnalogOut "1" --> "1" TimerDriver
@enduml