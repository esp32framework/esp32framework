@startuml diagrama

class DigitalOut{
    +set_level(Level)
    +get_level()
    +set_high()
    +set_low()
    +toggle()
    +blink(u32, u64)
    +update_interrupt()
}

class _DigitalOut {
    -pin_driver: PinDriver<'a, AnyIOPin, Output>,
    -timer_driver: TimerDriver<'a>,
    -interrupt_update_code: Arc<AtomicInterruptUpdateCode>
    +set_level(Level)
    +get_level()
    +set_high()
    +set_low()
    +toggle()
    +blink(u32, u64)
    +update_interrupt()
}


class DigitalIn{
    +set_pull(Pull)
    +change_interrupt_type(InterruptType)
    +trigger_if_mantains_after(u64)
    +subscribe_trigger(func)
    +trigger_on_interrupt(func, InterruptType)
    +trigger_on_interrupt_first_n_times(usize,func, InterruptType)
    +timer_reached()
    +get_level()
    +is_high()
    +is_low()
    +set_debounce(u64)
}

class _DigitalIn {
    +pin_driver: PinDriver<'a, AnyIOPin, Input>
    -timer_driver: TimerDriver<'a>
    -debounce_ms: Option<u64>
    +set_pull(Pull)
    +change_interrupt_type(InterruptType)
    +trigger_if_mantains_after(u64)
    +subscribe_trigger(func)
    +trigger_on_interrupt(func, InterruptType)
    +trigger_on_interrupt_first_n_times(usize,func, InterruptType)
    +timer_reached()
    +get_level()
    +is_high()
    +is_low()
    +set_debounce(u64)
}

class Notifier{
    + notify()
}

enum InterruptType {
    PosEdge
    NegEdge
    AnyEdge
    LowLevel
    HighLevel
}

enum InterruptUpdate {
    Blink,
    None
}

DigitalIn *-- _DigitalIn
_DigitalIn -> InterruptType
_DigitalOut -> InterruptUpdate
DigitalOut -> _DigitalOut
_DigitalIn -> Notifier
@enduml
