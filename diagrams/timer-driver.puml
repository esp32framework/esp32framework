@startuml Timer Driver

class TimerDriver{
    - id: u16
    - next_child: u16
    + create_child_copy()
    + delay(u32)
    + interrupt_after(u16,u64, callback)
    + interrupt_after_n_times(u16, u64, Option<u32>, bool, callback)
    + enable(u16)
    + disable(u16)
    + remove_interrupt(u16)
    + update_interrupt()
}

class _TimerDriver{
    - driver: ESPTimerDriver
    + interrupt_after(u16,u64, callback)
    + interrupt_after_n_times(u16, u64, Option<u32>, bool, callback)
    + enable(u16)
    + disable(u16)
    + remove_interrupt(u16)
    + _update_interrupt()
}

class InterruptUpdate{
    - update: Arc<AtomicBool>
    + any_updates()
    + new_update()
    + handling_update()
    + handle_any_updates()
}

class TimeInterrupt{
    - after: u64
    - id: u16
    - current_alarm_id: usize
    - remaining_triggers: Option<u32>
    - auto_reenable: bool
    - callback: Callback
    + get_alarm(u64)
    + disable_previouse_alarms()
    + trigger()
    + any_triggers_left()
}

class Alarm{
    -time: u64,
    -id: u16,
    -alarm_id: usize
}

class Notifier{
    + notify()
}

enum TimerInterruptStatus{
    Disabled,
    Enabled,
    Removing
}

TimerDriver *-- _TimerDriver
_TimerDriver *-- InterruptUpdate
_TimerDriver --> TimeInterrupt
_TimerDriver --> Alarm
TimeInterrupt --> TimerInterruptStatus
_TimerDriver -> Notifier

@enduml